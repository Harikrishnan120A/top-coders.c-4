version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16.3
    container_name: identity-postgres
    environment:
      POSTGRES_USER: identity
      POSTGRES_PASSWORD: password
      POSTGRES_DB: identity_service
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U identity"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - identity-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: identity-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - identity-network

  # Kafka (Zookeeper + Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: identity-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - identity-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: identity-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - identity-network

  # Identity Service API
  api:
    build: .
    container_name: identity-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://identity:password@postgres:5432/identity_service
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - identity-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: identity-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - identity-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  identity-network:
    driver: bridge
